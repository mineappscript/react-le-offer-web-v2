//index.tsx

import { gumletLoader } from '@/lib/gumlet';
import { IMAGES } from '@/lib/images';
import Image from 'next/image';
import React, { FC, useState } from 'react';
import FooterCategoryCard from './FooterCategoryCard';

import { useRouter } from 'next/router';
import Link from 'next/link';
import { useTranslation } from 'next-i18next';
// import { categoriesApi } from '@/store/apiSlices/categoriesApi';

import NewsLetterInput from './NewsLetterInput';
import { useSelector } from 'react-redux';
import { RootState } from '@/store/store';
import { HydrationGuard } from '../HydrationGuard/HydrationGuard';

export type connectSection = {
  title: string;
  tollFree: string;
  newsLetterTitle: string;
  newsLetterInputPlaceholder: string;
  newsLetterSubmitBtnText: string;
};

type FooterSectionItem = {
  itemName: string;
  categories: string[];
};

export type props = {
  // categories?: ResponseGetAllGrandParentCategoriesPayload;
};

const Footer: FC<props> = () => {
  const router = useRouter();
  // const { pathname } = router;
  const { locales, locale: activeLocale } = router;

  const otherLocales = locales?.filter((locale) => locale !== activeLocale);

  const changeLocale = (locale: string) => {
    document.cookie = `NEXT_LOCALE=${locale}`;
  };
  const { t } = useTranslation('common');
  const categoriesSection: FooterSectionItem[] = t('page.footerSection', { returnObjects: true });
  const connectSection: connectSection = t('page.connectSection', { returnObjects: true });
  const { categories } = useSelector((state: RootState) => state.auth);

  const [isOpen, setIsOpen] = useState(false);

  return (
    <HydrationGuard>

    <div className=" w-full bg-bg-primary-light !text-text-secondary-light dark:text-text-secondary-dark">
      <div className=" mobile:divide-y-0 divide-y-2 divide-border-tertiary-light flex flex-col items-center justify-between max-w-[1440px] min-h-[632px] mx-auto px-[64px] mobile:px-[16px]">
        <div className="h-full w-full flex justify-between mt-[40px] mobile:flex-col">
          <div className="w-[70%] flex items-start justify-between mobile:flex-col mobile:w-full ">
            {categoriesSection.length ? categoriesSection?.slice(0, 3)?.map((item, index) => (
              <FooterCategoryCard item={item} key={index} />
            )) : null}

            <>
              <div className="w-full cursor-pointer" onClick={() => setIsOpen(!isOpen)}>
                <div className="relative  mobile:flex text-xs md:text-base mobile:items-center mobile:justify-between font-bold mobile:py-5 cursor-pointer pb-2">
                  {categoriesSection?.[3]?.itemName}
                  {isOpen ? (
                    <>
                  
                      <Image
                        width={12}
                        height={7}
                        className="sm:hidden mr-4"
                        src={IMAGES.UP_ARROW_ICON_WHITE}
                        loader={gumletLoader}
                        alt="up-arrow-icon"
                      />
                    </>
                  ) : (
                    <>
                     
                      <Image
                        width={12}
                        height={7}
                        className="sm:hidden  mr-4"
                        src={IMAGES.DOWN_ARROW_ICON_WHITE}
                        loader={gumletLoader}
                        alt="down-arrow-icon"
                      />
                    </>
                  )}
                  <div className="absolute mobile:hidden md:block bottom-0 left-0 rtl:right-0 w-[55px] border-b border-brand-color"></div>
                </div>
                {categories?.data.slice(0, 6).map((sub, index) => (
                  <div key={index} className="mt-5">
                    <Link
                      href={'/'}
                      className={`${
                        !isOpen && 'mobile:hidden'
                      }  text-[10px] md:text-xs font-normal hover:text-brand-color`}
                    >
                      {sub.title}
                    </Link>
                  </div>
                ))}
              </div>
            </>
          </div>
          <div className=" w-[23%] mobile:flex-col mobile:w-full">
            <div className="w-full font-bold relative pb-2 text-xs md:text-base mobile:mt-5">
              {connectSection.title}
              <div className="absolute mobile:hidden md:block bottom-0 left-0 rtl:right-0 w-[55px] border-b border-brand-color"></div>
            </div>
            <div className="my-9 mobile:mt-1 w-full text-xs md:text-base">
              {connectSection.tollFree}: <span className="text-brand-color">(866)856-5678</span>
            </div>
            <div className="relative pb-2  mobile:mb-0  my-9 w-full text-xs md:text-base font-bold">
              {connectSection.newsLetterTitle}
              <div className="absolute mobile:hidden md:block bottom-0 left-0 rtl:right-0 w-[55px] border-b border-brand-color"></div>
            </div>
            <NewsLetterInput />
            <div className="my-9  w-full ">
              <span className="bg-brand-color border px-4 py-2 rounded-xl uppercase text-sm">{activeLocale}</span>
              {otherLocales?.map((locale, localeIndex) => {
                const { pathname, query } = router;

                return (
                  <Link
                    key={localeIndex}
                    href={{ pathname, query }}
                    locale={locale}
                    onClick={() => changeLocale(locale)}
                    className=" ml-2  hover:bg-[#414052]/80 active:bg-[#414052] px-4 py-2 rounded-xl uppercase text-sm transition-colors"
                  >
                    {locale}
                  </Link>
                );
              })}
            </div>
          </div>
        </div>

        <div className=" mobile:pb-6 w-full sm:h-[104px] flex items-center justify-between mobile:flex-col ">
          <Image width={141} height={36} src={IMAGES.FOOTER_LOGO_WHITE} alt="footer logo" loader={gumletLoader} />
          <div className="flex text-xs md:text-sm mobile:order-3 mobile:mt-4">
            {' '}
            &#169; {new Date().getFullYear()}Equipnow
          </div>
          <div className="flex mobile:order-2 mobile:mt-4">
            <Image
              className="cursor-pointer"
              width={40}
              height={40}
              src={IMAGES.FACEBOOK_LOGO_BLACK}
              alt="FACEBOOK_LOGO_BLACK"
              loader={gumletLoader}
            />
            <Image
              className="ml-4 cursor-pointer"
              width={40}
              height={40}
              src={IMAGES.TWITTER_LOGO_BLACK}
              alt="TWITTER_LOGO_BLACK"
              loader={gumletLoader}
            />
            <Image
              className="ml-4 cursor-pointer"
              width={40}
              height={40}
              src={IMAGES.LINKEDIN_LOGO_BLACK}
              alt="LINKEDIN_LOGO_BLACK"
              loader={gumletLoader}
            />
            <Image
              className="ml-4 cursor-pointer"
              width={40}
              height={40}
              src={IMAGES.INSTAGRAM_LOGO_BLACK}
              alt="INSTAGRAM_LOGO_BLACK"
              loader={gumletLoader}
            />
            <Image
              className="ml-4 cursor-pointer"
              width={40}
              height={40}
              src={IMAGES.YOUTUBE_LOGO_BLACK}
              alt="YOUTUBE_LOGO_BLACK"
              loader={gumletLoader}
            />
          </div>
        </div>
      </div>
    </div>
    </HydrationGuard>
  );
};

export default Footer;
------------------------------------------------------------------------------
newsletter.tsx

import React, { useState } from 'react';
import Button from '../Button/Button';
import { productsApi } from '@/store/apiSlices/productsApi';
import { connectSection } from './index';
import { useTranslation } from 'next-i18next';

const NewsLetterInput = () => {
  const { t } = useTranslation('common');
  const connectSection: connectSection = t('page.connectSection', { returnObjects: true });

  const [subscribeToNewsLetter, { error, data: newData }] = productsApi.useSubscribeToNewsLetterMutation();
  const [email, setEmail] = useState('');
  
  const handleNewsLetterSubmit = () => {
    subscribeToNewsLetter(email);
  };

  return (
    <>
      <div className="my-9 w-full mobile:mt-0  h-[44px] relative">
        <input
          className="w-[80%] text-sm h-full p-4 rtl:mr-14 rtl:pr-24 outline-none text-text-primary-light dark:text-text-secondary-dark rounded-l-md"
          type="text"
          placeholder={connectSection.newsLetterInputPlaceholder}
          onChange={(e) => {
            setEmail(e.target.value);
          }}
        />
        <Button
          onClick={() => handleNewsLetterSubmit()}
          className=" absolute top-0 right-0 w-[92px] mobile:w-[25%] !h-full bg-btn-primary-light rounded-l-none rounded-r-md  text-text-primary-light dark:text-text-primary-dark text-xs font-semibold"
        >
          {connectSection.newsLetterSubmitBtnText}
        </Button>
        {/* {error && <div style={{ color: 'red' }}>{}</div>} */}
      </div>
      {error && <div className="text-error">* {(error as { data: { message: string } }).data.message}</div>}
      {newData && <div>{newData.message}</div>}
    </>
  );
};

export default NewsLetterInput;
----------------------------------------------------------------------------------------
FooterCategoryCard.tsx

import { gumletLoader } from '@/lib/gumlet';
import { IMAGES } from '@/lib/images';
import Image from 'next/image';
import React, { FC, useState } from 'react';

export type category = {
  itemName: string;
  categories: string[];
};

export type Props = {
  item: category;
};

const FooterCategoryCard: FC<Props> = ({ item }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <>
      <div className="w-full cursor-pointer" onClick={() => setIsOpen(!isOpen)}>
        <div className="relative  mobile:flex text-xs md:text-base mobile:items-center mobile:justify-between font-bold mobile:py-5 cursor-pointer pb-2">
          {item.itemName}
          {isOpen ? (
            <>
             
              <Image
                width={12}
                height={7}
                className="sm:hidden mr-4 "
                src={IMAGES.UP_ARROW_ICON_WHITE}
                loader={gumletLoader}
                alt="up-arrow-icon"
              />
            </>
          ) : (
            <>
             
              <Image
                width={12}
                height={7}
                className="sm:hidden mr-4 "
                src={IMAGES.DOWN_ARROW_ICON_WHITE}
                loader={gumletLoader}
                alt="down-arrow-icon"
              />
            </>
          )}
          <div className="absolute mobile:hidden md:block bottom-0 left-0 rtl:right-0 w-[55px] border-b border-brand-color"></div>
        </div>
        {item?.categories?.map((sub, index) => (
          <div className={`${!isOpen && 'mobile:hidden'} mt-7 text-[10px] md:text-xs font-normal`} key={index}>
            {sub}
          </div>
        ))}
      </div>
    </>
  );
};

export default FooterCategoryCard;
